-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;


ALTER TABLE IF EXISTS public.movie_actors DROP CONSTRAINT IF EXISTS movie_actors_actor_id_fkey;

ALTER TABLE IF EXISTS public.movie_actors DROP CONSTRAINT IF EXISTS movie_actors_movie_id_fkey;

ALTER TABLE IF EXISTS public.movie_directors DROP CONSTRAINT IF EXISTS movie_directors_director_id_fkey;

ALTER TABLE IF EXISTS public.movie_directors DROP CONSTRAINT IF EXISTS movie_directors_movie_id_fkey;

ALTER TABLE IF EXISTS public.movie_genres DROP CONSTRAINT IF EXISTS movie_genres_genre_id_fkey;

ALTER TABLE IF EXISTS public.movie_genres DROP CONSTRAINT IF EXISTS movie_genres_movie_id_fkey;

ALTER TABLE IF EXISTS public.movies DROP CONSTRAINT IF EXISTS movies_type_id_fkey;

ALTER TABLE IF EXISTS public.user_roles DROP CONSTRAINT IF EXISTS user_roles_role_id_fkey;

ALTER TABLE IF EXISTS public.user_roles DROP CONSTRAINT IF EXISTS user_roles_user_id_fkey;



DROP TABLE IF EXISTS public.actors;

CREATE TABLE IF NOT EXISTS public.actors
(
    id serial NOT NULL,
    first_name character varying(50) COLLATE pg_catalog."default",
    last_name character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT actors_pkey PRIMARY KEY (id)
);

DROP TABLE IF EXISTS public.directors;

CREATE TABLE IF NOT EXISTS public.directors
(
    id serial NOT NULL,
    first_name character varying(50) COLLATE pg_catalog."default",
    last_name character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT directors_pkey PRIMARY KEY (id)
);

DROP TABLE IF EXISTS public.genres;

CREATE TABLE IF NOT EXISTS public.genres
(
    id serial NOT NULL,
    genre character varying(100) COLLATE pg_catalog."default",
    CONSTRAINT genres_pkey PRIMARY KEY (id)
);

DROP TABLE IF EXISTS public.movie_actors;

CREATE TABLE IF NOT EXISTS public.movie_actors
(
    movie_id integer NOT NULL,
    actor_id integer NOT NULL,
    CONSTRAINT movie_actors_pkey PRIMARY KEY (movie_id, actor_id)
);

DROP TABLE IF EXISTS public.movie_directors;

CREATE TABLE IF NOT EXISTS public.movie_directors
(
    movie_id integer NOT NULL,
    director_id integer NOT NULL,
    CONSTRAINT movie_directors_pkey PRIMARY KEY (movie_id, director_id)
);

DROP TABLE IF EXISTS public.movie_genres;

CREATE TABLE IF NOT EXISTS public.movie_genres
(
    movie_id integer NOT NULL,
    genre_id integer NOT NULL,
    CONSTRAINT movie_genres_pkey PRIMARY KEY (movie_id, genre_id)
);

DROP TABLE IF EXISTS public.movies;

CREATE TABLE IF NOT EXISTS public.movies
(
    id serial NOT NULL,
    ru_title character varying(255) COLLATE pg_catalog."default",
    en_title character varying(255) COLLATE pg_catalog."default",
    type_id integer,
    release_year integer,
    description character varying(800) COLLATE pg_catalog."default",
    length integer,
    CONSTRAINT movies_pkey PRIMARY KEY (id)
);

DROP TABLE IF EXISTS public.roles;

CREATE TABLE IF NOT EXISTS public.roles
(
    role_id serial NOT NULL,
    role_name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT roles_pkey PRIMARY KEY (role_id),
    CONSTRAINT roles_role_name_key UNIQUE (role_name)
);

DROP TABLE IF EXISTS public.types;

CREATE TABLE IF NOT EXISTS public.types
(
    id serial NOT NULL,
    type character varying(20) COLLATE pg_catalog."default",
    CONSTRAINT types_pkey PRIMARY KEY (id)
);

DROP TABLE IF EXISTS public.user_roles;

CREATE TABLE IF NOT EXISTS public.user_roles
(
    user_id integer NOT NULL,
    role_id integer NOT NULL,
    CONSTRAINT user_roles_pkey PRIMARY KEY (user_id, role_id)
);

DROP TABLE IF EXISTS public.users;

CREATE TABLE IF NOT EXISTS public.users
(
    user_id serial NOT NULL,
    email character varying(255) COLLATE pg_catalog."default" NOT NULL,
    password character varying(255) COLLATE pg_catalog."default" NOT NULL,
    login character varying(255) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT users_pkey PRIMARY KEY (user_id),
    CONSTRAINT users_email_key UNIQUE (email),
    CONSTRAINT users_login_key UNIQUE (login)
);

ALTER TABLE IF EXISTS public.movie_actors
    ADD CONSTRAINT movie_actors_actor_id_fkey FOREIGN KEY (actor_id)
    REFERENCES public.actors (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.movie_actors
    ADD CONSTRAINT movie_actors_movie_id_fkey FOREIGN KEY (movie_id)
    REFERENCES public.movies (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.movie_directors
    ADD CONSTRAINT movie_directors_director_id_fkey FOREIGN KEY (director_id)
    REFERENCES public.directors (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.movie_directors
    ADD CONSTRAINT movie_directors_movie_id_fkey FOREIGN KEY (movie_id)
    REFERENCES public.movies (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.movie_genres
    ADD CONSTRAINT movie_genres_genre_id_fkey FOREIGN KEY (genre_id)
    REFERENCES public.genres (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.movie_genres
    ADD CONSTRAINT movie_genres_movie_id_fkey FOREIGN KEY (movie_id)
    REFERENCES public.movies (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.movies
    ADD CONSTRAINT movies_type_id_fkey FOREIGN KEY (type_id)
    REFERENCES public.types (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.user_roles
    ADD CONSTRAINT user_roles_role_id_fkey FOREIGN KEY (role_id)
    REFERENCES public.roles (role_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.user_roles
    ADD CONSTRAINT user_roles_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;

END;
